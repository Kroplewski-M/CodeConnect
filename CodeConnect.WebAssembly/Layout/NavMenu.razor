@using ApplicationLayer.DTO_s
@using ApplicationLayer.Interfaces
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager NavigationManager
@inject IAuthenticateServiceClient AuthenticateServiceClient
@inject IFollowingService FollowingService
<AuthorizeView>
    <Authorized>
        <div class="@(_openNav ? "left-[190px]" : "left-[10px]") xl:hidden translate-x-full xl:-translate-x-0 transition-transform fixed top-5 z-[300] hover:bg-gray-100/10 rounded-full">
            <i class="@(_openNav ? "fa-xmark text-light-primaryColor dark:bg-text-supportColor/90" : "fa-bars text-light-secondaryColor dark:text-dark-secondaryColor") fa-solid fa-2xl cursor-pointer" @onclick="() => _openNav = !_openNav"></i>
        </div>

        <aside class="sm:w-[250px] w-[80%] fixed top-0 left-0 z-[200] h-screen transition-transform @(_openNav ? "" : "-translate-x-full xl:translate-x-0")" aria-label="Sidebar">
            <div class="h-full px-3 py-4 overflow-y-auto bg-light-secondaryColor dark:bg-dark-secondaryColor">
                <a href="/" class="flex items-center p-2 rounded-lg  group mb-5">
                    <span class="ms-3 text-light-primaryColor dark:bg-text-supportColor font-bold text-[30px]">&lt;Code Connect/&gt;</span>
                </a>
                <hr class="mb-5"/>
                <ul class="space-y-2 font-medium">
                    <li>
                        <a href="/MyFeed" class="flex items-center p-2 rounded-lg dark:text-white hover:bg-gray-100/10 group mb-5">
                            <i class="fa-solid fa-house fa-lg" style="color: #f8f9fa; width: 24px;"></i>
                            <span class="ms-3 text-light-primaryColor dark:text-dark-supportColor">Home</span>
                        </a>
                    </li>
                    <li>
                        <a href="/Notifications" class="flex items-center p-2 rounded-lg dark:text-white hover:bg-gray-100/10 group mb-5">
                            <i class="fa-solid fa-bell fa-lg" style="color: #f8f9fa; width: 24px;"></i>
                            <span class="ms-3 text-light-primaryColor dark:text-dark-supportColor">Notifications</span>
                        </a>
                    </li>
                    <li>
                        <a href="/Connect" class="flex items-center p-2 rounded-lg dark:text-white hover:bg-gray-100/10 group mb-5">
                            <i class="fa-solid fa-user-group fa-lg" style="color: #f8f9fa; width: 24px;"></i>
                            <span class="ms-3 text-light-primaryColor dark:text-dark-supportColor">Connect</span>
                        </a>
                    </li>
                    <li>
                        <a href="/Messages" class="flex items-center p-2 dark:text-white hover:bg-gray-100/10 rounded-lg group">
                            <i class="fa-solid fa-message fa-lg" style="color: #f8f9fa; width: 24px;"></i>
                            <span class="ms-3 text-light-primaryColor dark:text-dark-supportColor">Messages</span>
                        </a>
                    </li>
                </ul>
                @if (_userDetails != null)
                {
                    <div class="absolute bottom-[30px] left-[10px] hover:bg-gray-100/10 cursor-pointer rounded-md p-2 w-[90%] @(LoadingUserDetails?"animate-pulse bg-gray-100/50":"")" onclick="@(() => NavigationManager.NavigateTo($"/Profile/{_userDetails.UserName}"))">
                        @if (!LoadingUserDetails)
                        {
                            <img class="w-10 ms-3 h-10 rounded-full mb-3" src="@_userDetails.ProfileImg" alt="Rounded avatar">
                            <p class="font-bold ms-3  text-light-primaryColor dark:text-dark-supportColor">@_userDetails.FirstName</p>
                            <p class="font-bold ms-3 mb-2 text-light-primaryColor dark:text-dark-supportColor">@_userDetails.LastName</p>
                            <p class="font-bold ms-3 mb-2 text-light-primaryColor dark:text-dark-supportColor">&#x40;@_userDetails.UserName</p>
                            <p class="text-[13px] ms-3 text-light-primaryColor/90 dark:text-dark-supportColor/90 ">Followers: <span class=" text-light-primaryColor dark:text-dark-supportColor font-bold">@FollowerCount</span></p>
                            <p class="text-[13px] ms-3 text-light-primaryColor/90 dark:text-dark-supportColor/90">Following: <span class=" text-light-primaryColor dark:text-dark-supportColor font-bold">@FollowingsCount</span></p>
                        }
                        else
                        {
                            <div class="w-[100%] h-[300px]">
                                <div class="w-10 ms-3 h-10 rounded-full mb-3 bg-gray-100"></div>
                                <div class="w-[100%] h-[20px] rounded-full mb-[5px] bg-gray-100"></div>
                                <div class="w-[100%] h-[20px] rounded-full mb-[5px] bg-gray-100"></div>
                                <div class="w-[100%] h-[20px] rounded-full mb-[5px] bg-gray-100"></div>
                            </div>
                        }
                    </div>
                }
            </div>
        </aside>
    </Authorized>
</AuthorizeView>

@implements IDisposable
@code{
    private bool _openNav = false;
    private UserDetails? _userDetails = null;
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }

    private int FollowerCount { get; set; } = 0;
    private int FollowingsCount { get; set; } = 0;
    
    protected override void OnInitialized()
    {
        AuthenticateServiceClient.OnChange +=  OnAuthenticationStateChanged;
        OnAuthenticationStateChanged();
    }

    private bool LoadingUserDetails { get; set; } = true;
    private void OnAuthenticationStateChanged()
    {
        Task.Run(async () =>
        {
            LoadingUserDetails = true;
            if (AuthenticationState == null) return;
            var authState = await AuthenticationState;
            var user = authState?.User;
            
            if (user?.Identity is not null && user.Identity.IsAuthenticated)
            {
                _userDetails = AuthenticateServiceClient.GetUserFromFromAuthState(authState);
                var userFollowersAndFollowing = await FollowingService.GetUserFollowersCount(_userDetails.UserName);
                FollowerCount = userFollowersAndFollowing.FollowersCount;
                FollowingsCount = userFollowersAndFollowing.FollowingCount;
                LoadingUserDetails = false;
                await InvokeAsync(StateHasChanged);
            }
            else
            {
                NavigationManager.NavigateTo("/");
            }
        });
    }
    public void Dispose()
    {
        AuthenticateServiceClient.OnChange -= OnAuthenticationStateChanged;
    }

    public void NavigateToProfile()
    {
        
    }
}


