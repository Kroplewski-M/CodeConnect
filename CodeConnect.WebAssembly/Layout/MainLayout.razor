@using DomainLayer.Entities
@using Blazored.LocalStorage;
@inherits LayoutComponentBase
@inject NavigationManager NavManager
@inject NotificationsService NotificationsService
@inject IJSRuntime JS
@inject ILocalStorageService localStorageService

<div class="bg-light-primaryColor dark:bg-dark-primaryColor min-h-screen flex flex-row">
    @if (!IsNonNavPage())
    {
        <div class="z-[300] ">
            <NavMenu/>
        </div>
    }
    <main class="px-4 z-[200] flex-grow pt-6 mt-5 ">
        <span @onclick="() => SetDarkTheme(!_darkTheme)" class="fa-solid @(_darkTheme ? "fa-sun text-light-primaryColor" : "fa-moon text-dark-primaryColor") absolute top-5 right-5 cursor-pointer fa-lg"></span>
        <div class="">
            @foreach (var notification in Notifications)
            {
                <div class="@GetNotificationType(notification.NotificationType) ">
                    <p>@notification.Message</p>
                </div>
            }
        </div>
        @Body
    </main>
</div>

@code{
    public List<Notification> Notifications = [];
    private bool _darkTheme = false;
    protected override async Task OnInitializedAsync()
    {
        NotificationsService.OnChange += UpdateNotifications;
        Notifications = NotificationsService.GetNotification();
        
        var darkTheme = await localStorageService.GetItemAsync<bool>("DarkTheme");
        if (darkTheme)
        {
            ToggleDarkMode();
        }
    }

    private bool IsNonNavPage()
    {
        string[] nonNavPages = ["/","/Account/Register", "/Account/Login"]; 
        return nonNavPages.Any(page => NavManager.Uri.EndsWith(page));
    }
    private string GetNotificationType(NotificationType type)
    {
        switch (type)
        {
            case NotificationType.Success:
                return "bg-success";
            case NotificationType.Error:
                return "bg-danger";
            case NotificationType.Warning:
                return "bg-warning";
            case NotificationType.Info:
                return "bg-info";
            default:
                return "";
        }
    }

    private void UpdateNotifications()
    {
        Notifications = NotificationsService.GetNotification();
        StateHasChanged();
    }

    public void Dispose()
    {
        NotificationsService.OnChange -= UpdateNotifications;
    }

    private void ToggleDarkMode()
    {
        JS.InvokeVoidAsync("toggleDarkMode");
        _darkTheme = !_darkTheme;
    }

    private async Task SetDarkTheme(bool isDarkTheme)
    {
        await localStorageService.SetItemAsync<bool>("DarkTheme", isDarkTheme);
        await JS.InvokeVoidAsync("toggleDarkMode");
        _darkTheme = isDarkTheme;
    }
}
